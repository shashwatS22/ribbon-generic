// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionDurationSet extends ethereum.Event {
  get params(): AuctionDurationSet__Params {
    return new AuctionDurationSet__Params(this);
  }
}

export class AuctionDurationSet__Params {
  _event: AuctionDurationSet;

  constructor(event: AuctionDurationSet) {
    this._event = event;
  }

  get auctionDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAuctionDuration(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CapSet extends ethereum.Event {
  get params(): CapSet__Params {
    return new CapSet__Params(this);
  }
}

export class CapSet__Params {
  _event: CapSet;

  constructor(event: CapSet) {
    this._event = event;
  }

  get oldCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CloseShort extends ethereum.Event {
  get params(): CloseShort__Params {
    return new CloseShort__Params(this);
  }
}

export class CloseShort__Params {
  _event: CloseShort;

  constructor(event: CloseShort) {
    this._event = event;
  }

  get options(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CollectVaultFees extends ethereum.Event {
  get params(): CollectVaultFees__Params {
    return new CollectVaultFees__Params(this);
  }
}

export class CollectVaultFees__Params {
  _event: CollectVaultFees;

  constructor(event: CollectVaultFees) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitiateWithdraw extends ethereum.Event {
  get params(): InitiateWithdraw__Params {
    return new InitiateWithdraw__Params(this);
  }
}

export class InitiateWithdraw__Params {
  _event: InitiateWithdraw;

  constructor(event: InitiateWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InstantWithdraw extends ethereum.Event {
  get params(): InstantWithdraw__Params {
    return new InstantWithdraw__Params(this);
  }
}

export class InstantWithdraw__Params {
  _event: InstantWithdraw;

  constructor(event: InstantWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManagementFeeSet extends ethereum.Event {
  get params(): ManagementFeeSet__Params {
    return new ManagementFeeSet__Params(this);
  }
}

export class ManagementFeeSet__Params {
  _event: ManagementFeeSet;

  constructor(event: ManagementFeeSet) {
    this._event = event;
  }

  get managementFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newManagementFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewOffer extends ethereum.Event {
  get params(): NewOffer__Params {
    return new NewOffer__Params(this);
  }
}

export class NewOffer__Params {
  _event: NewOffer;

  constructor(event: NewOffer) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get biddingToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get minPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minBidSize(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalSize(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class NewOptionStrikeSelected extends ethereum.Event {
  get params(): NewOptionStrikeSelected__Params {
    return new NewOptionStrikeSelected__Params(this);
  }
}

export class NewOptionStrikeSelected__Params {
  _event: NewOptionStrikeSelected;

  constructor(event: NewOptionStrikeSelected) {
    this._event = event;
  }

  get strikePrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get delta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenShort extends ethereum.Event {
  get params(): OpenShort__Params {
    return new OpenShort__Params(this);
  }
}

export class OpenShort__Params {
  _event: OpenShort;

  constructor(event: OpenShort) {
    this._event = event;
  }

  get options(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PerformanceFeeSet extends ethereum.Event {
  get params(): PerformanceFeeSet__Params {
    return new PerformanceFeeSet__Params(this);
  }
}

export class PerformanceFeeSet__Params {
  _event: PerformanceFeeSet;

  constructor(event: PerformanceFeeSet) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPerformanceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit1 extends ethereum.Event {
  get params(): Deposit1__Params {
    return new Deposit1__Params(this);
  }
}

export class Deposit1__Params {
  _event: Deposit1;

  constructor(event: Deposit1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitiateGnosisAuction extends ethereum.Event {
  get params(): InitiateGnosisAuction__Params {
    return new InitiateGnosisAuction__Params(this);
  }
}

export class InitiateGnosisAuction__Params {
  _event: InitiateGnosisAuction;

  constructor(event: InitiateGnosisAuction) {
    this._event = event;
  }

  get auctioningToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get biddingToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get auctionCounter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class RibbonThetaVaultWithSwap__depositReceiptsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class RibbonThetaVaultWithSwap__optionStateResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class RibbonThetaVaultWithSwap__shareBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class RibbonThetaVaultWithSwap__vaultParamsResult {
  value0: boolean;
  value1: i32;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: boolean,
    value1: i32,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class RibbonThetaVaultWithSwap__vaultStateResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class RibbonThetaVaultWithSwap__withdrawalsResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class RibbonThetaVaultWithSwap extends ethereum.SmartContract {
  static bind(address: Address): RibbonThetaVaultWithSwap {
    return new RibbonThetaVaultWithSwap("RibbonThetaVaultWithSwap", address);
  }

  DELAY(): BigInt {
    let result = super.call("DELAY", "DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DELAY", "DELAY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GAMMA_CONTROLLER(): Address {
    let result = super.call(
      "GAMMA_CONTROLLER",
      "GAMMA_CONTROLLER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_GAMMA_CONTROLLER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "GAMMA_CONTROLLER",
      "GAMMA_CONTROLLER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MARGIN_POOL(): Address {
    let result = super.call("MARGIN_POOL", "MARGIN_POOL():(address)", []);

    return result[0].toAddress();
  }

  try_MARGIN_POOL(): ethereum.CallResult<Address> {
    let result = super.tryCall("MARGIN_POOL", "MARGIN_POOL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  OTOKEN_FACTORY(): Address {
    let result = super.call("OTOKEN_FACTORY", "OTOKEN_FACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_OTOKEN_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OTOKEN_FACTORY",
      "OTOKEN_FACTORY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PERIOD(): BigInt {
    let result = super.call("PERIOD", "PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PERIOD", "PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SWAP_CONTRACT(): Address {
    let result = super.call("SWAP_CONTRACT", "SWAP_CONTRACT():(address)", []);

    return result[0].toAddress();
  }

  try_SWAP_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "SWAP_CONTRACT",
      "SWAP_CONTRACT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountVaultBalance(account: Address): BigInt {
    let result = super.call(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_accountVaultBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  auctionDuration(): BigInt {
    let result = super.call(
      "auctionDuration",
      "auctionDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionDuration",
      "auctionDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentOption(): Address {
    let result = super.call("currentOption", "currentOption():(address)", []);

    return result[0].toAddress();
  }

  try_currentOption(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentOption",
      "currentOption():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentOtokenPremium(): BigInt {
    let result = super.call(
      "currentOtokenPremium",
      "currentOtokenPremium():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentOtokenPremium(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentOtokenPremium",
      "currentOtokenPremium():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentQueuedWithdrawShares(): BigInt {
    let result = super.call(
      "currentQueuedWithdrawShares",
      "currentQueuedWithdrawShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentQueuedWithdrawShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentQueuedWithdrawShares",
      "currentQueuedWithdrawShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositReceipts(
    param0: Address
  ): RibbonThetaVaultWithSwap__depositReceiptsResult {
    let result = super.call(
      "depositReceipts",
      "depositReceipts(address):(uint16,uint104,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RibbonThetaVaultWithSwap__depositReceiptsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_depositReceipts(
    param0: Address
  ): ethereum.CallResult<RibbonThetaVaultWithSwap__depositReceiptsResult> {
    let result = super.tryCall(
      "depositReceipts",
      "depositReceipts(address):(uint16,uint104,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonThetaVaultWithSwap__depositReceiptsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastQueuedWithdrawAmount(): BigInt {
    let result = super.call(
      "lastQueuedWithdrawAmount",
      "lastQueuedWithdrawAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastQueuedWithdrawAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastQueuedWithdrawAmount",
      "lastQueuedWithdrawAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastStrikeOverrideRound(): i32 {
    let result = super.call(
      "lastStrikeOverrideRound",
      "lastStrikeOverrideRound():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_lastStrikeOverrideRound(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "lastStrikeOverrideRound",
      "lastStrikeOverrideRound():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  liquidityGauge(): Address {
    let result = super.call("liquidityGauge", "liquidityGauge():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityGauge(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityGauge",
      "liquidityGauge():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managementFee(): BigInt {
    let result = super.call("managementFee", "managementFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managementFee",
      "managementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextOption(): Address {
    let result = super.call("nextOption", "nextOption():(address)", []);

    return result[0].toAddress();
  }

  try_nextOption(): ethereum.CallResult<Address> {
    let result = super.tryCall("nextOption", "nextOption():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextOptionReadyAt(): BigInt {
    let result = super.call(
      "nextOptionReadyAt",
      "nextOptionReadyAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextOptionReadyAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextOptionReadyAt",
      "nextOptionReadyAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionAuctionID(): BigInt {
    let result = super.call(
      "optionAuctionID",
      "optionAuctionID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_optionAuctionID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionAuctionID",
      "optionAuctionID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optionState(): RibbonThetaVaultWithSwap__optionStateResult {
    let result = super.call(
      "optionState",
      "optionState():(address,address,uint32)",
      []
    );

    return new RibbonThetaVaultWithSwap__optionStateResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_optionState(): ethereum.CallResult<
    RibbonThetaVaultWithSwap__optionStateResult
  > {
    let result = super.tryCall(
      "optionState",
      "optionState():(address,address,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonThetaVaultWithSwap__optionStateResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  optionsPremiumPricer(): Address {
    let result = super.call(
      "optionsPremiumPricer",
      "optionsPremiumPricer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_optionsPremiumPricer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "optionsPremiumPricer",
      "optionsPremiumPricer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  optionsPurchaseQueue(): Address {
    let result = super.call(
      "optionsPurchaseQueue",
      "optionsPurchaseQueue():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_optionsPurchaseQueue(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "optionsPurchaseQueue",
      "optionsPurchaseQueue():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  overriddenStrikePrice(): BigInt {
    let result = super.call(
      "overriddenStrikePrice",
      "overriddenStrikePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_overriddenStrikePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overriddenStrikePrice",
      "overriddenStrikePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  premiumDiscount(): BigInt {
    let result = super.call(
      "premiumDiscount",
      "premiumDiscount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_premiumDiscount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "premiumDiscount",
      "premiumDiscount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShare(): BigInt {
    let result = super.call("pricePerShare", "pricePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pricePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundPricePerShare(param0: BigInt): BigInt {
    let result = super.call(
      "roundPricePerShare",
      "roundPricePerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_roundPricePerShare(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundPricePerShare",
      "roundPricePerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareBalances(
    account: Address
  ): RibbonThetaVaultWithSwap__shareBalancesResult {
    let result = super.call(
      "shareBalances",
      "shareBalances(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new RibbonThetaVaultWithSwap__shareBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_shareBalances(
    account: Address
  ): ethereum.CallResult<RibbonThetaVaultWithSwap__shareBalancesResult> {
    let result = super.tryCall(
      "shareBalances",
      "shareBalances(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonThetaVaultWithSwap__shareBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shares(account: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_shares(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strikeSelection(): Address {
    let result = super.call(
      "strikeSelection",
      "strikeSelection():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_strikeSelection(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "strikeSelection",
      "strikeSelection():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalance(): BigInt {
    let result = super.call("totalBalance", "totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBalance", "totalBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPending(): BigInt {
    let result = super.call("totalPending", "totalPending():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPending(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPending", "totalPending():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultParams(): RibbonThetaVaultWithSwap__vaultParamsResult {
    let result = super.call(
      "vaultParams",
      "vaultParams():(bool,uint8,address,address,uint56,uint104)",
      []
    );

    return new RibbonThetaVaultWithSwap__vaultParamsResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_vaultParams(): ethereum.CallResult<
    RibbonThetaVaultWithSwap__vaultParamsResult
  > {
    let result = super.tryCall(
      "vaultParams",
      "vaultParams():(bool,uint8,address,address,uint56,uint104)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonThetaVaultWithSwap__vaultParamsResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  vaultPauser(): Address {
    let result = super.call("vaultPauser", "vaultPauser():(address)", []);

    return result[0].toAddress();
  }

  try_vaultPauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultPauser", "vaultPauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultState(): RibbonThetaVaultWithSwap__vaultStateResult {
    let result = super.call(
      "vaultState",
      "vaultState():(uint16,uint104,uint104,uint128,uint128)",
      []
    );

    return new RibbonThetaVaultWithSwap__vaultStateResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_vaultState(): ethereum.CallResult<
    RibbonThetaVaultWithSwap__vaultStateResult
  > {
    let result = super.tryCall(
      "vaultState",
      "vaultState():(uint16,uint104,uint104,uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonThetaVaultWithSwap__vaultStateResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  withdrawals(param0: Address): RibbonThetaVaultWithSwap__withdrawalsResult {
    let result = super.call(
      "withdrawals",
      "withdrawals(address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RibbonThetaVaultWithSwap__withdrawalsResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_withdrawals(
    param0: Address
  ): ethereum.CallResult<RibbonThetaVaultWithSwap__withdrawalsResult> {
    let result = super.tryCall(
      "withdrawals",
      "withdrawals(address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonThetaVaultWithSwap__withdrawalsResult(
        value[0].toI32(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _oTokenFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _gammaController(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _marginPool(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _swapContract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnRemainingOTokensCall extends ethereum.Call {
  get inputs(): BurnRemainingOTokensCall__Inputs {
    return new BurnRemainingOTokensCall__Inputs(this);
  }

  get outputs(): BurnRemainingOTokensCall__Outputs {
    return new BurnRemainingOTokensCall__Outputs(this);
  }
}

export class BurnRemainingOTokensCall__Inputs {
  _call: BurnRemainingOTokensCall;

  constructor(call: BurnRemainingOTokensCall) {
    this._call = call;
  }
}

export class BurnRemainingOTokensCall__Outputs {
  _call: BurnRemainingOTokensCall;

  constructor(call: BurnRemainingOTokensCall) {
    this._call = call;
  }
}

export class CloseRoundCall extends ethereum.Call {
  get inputs(): CloseRoundCall__Inputs {
    return new CloseRoundCall__Inputs(this);
  }

  get outputs(): CloseRoundCall__Outputs {
    return new CloseRoundCall__Outputs(this);
  }
}

export class CloseRoundCall__Inputs {
  _call: CloseRoundCall;

  constructor(call: CloseRoundCall) {
    this._call = call;
  }
}

export class CloseRoundCall__Outputs {
  _call: CloseRoundCall;

  constructor(call: CloseRoundCall) {
    this._call = call;
  }
}

export class CommitNextOptionCall extends ethereum.Call {
  get inputs(): CommitNextOptionCall__Inputs {
    return new CommitNextOptionCall__Inputs(this);
  }

  get outputs(): CommitNextOptionCall__Outputs {
    return new CommitNextOptionCall__Outputs(this);
  }
}

export class CommitNextOptionCall__Inputs {
  _call: CommitNextOptionCall;

  constructor(call: CommitNextOptionCall) {
    this._call = call;
  }
}

export class CommitNextOptionCall__Outputs {
  _call: CommitNextOptionCall;

  constructor(call: CommitNextOptionCall) {
    this._call = call;
  }
}

export class CompleteWithdrawCall extends ethereum.Call {
  get inputs(): CompleteWithdrawCall__Inputs {
    return new CompleteWithdrawCall__Inputs(this);
  }

  get outputs(): CompleteWithdrawCall__Outputs {
    return new CompleteWithdrawCall__Outputs(this);
  }
}

export class CompleteWithdrawCall__Inputs {
  _call: CompleteWithdrawCall;

  constructor(call: CompleteWithdrawCall) {
    this._call = call;
  }
}

export class CompleteWithdrawCall__Outputs {
  _call: CompleteWithdrawCall;

  constructor(call: CompleteWithdrawCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get creditor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitRoundsCall extends ethereum.Call {
  get inputs(): InitRoundsCall__Inputs {
    return new InitRoundsCall__Inputs(this);
  }

  get outputs(): InitRoundsCall__Outputs {
    return new InitRoundsCall__Outputs(this);
  }
}

export class InitRoundsCall__Inputs {
  _call: InitRoundsCall;

  constructor(call: InitRoundsCall) {
    this._call = call;
  }

  get numRounds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitRoundsCall__Outputs {
  _call: InitRoundsCall;

  constructor(call: InitRoundsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _initParams(): InitializeCall_initParamsStruct {
    return changetype<InitializeCall_initParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _vaultParams(): InitializeCall_vaultParamsStruct {
    return changetype<InitializeCall_vaultParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_initParamsStruct extends ethereum.Tuple {
  get _owner(): Address {
    return this[0].toAddress();
  }

  get _keeper(): Address {
    return this[1].toAddress();
  }

  get _feeRecipient(): Address {
    return this[2].toAddress();
  }

  get _managementFee(): BigInt {
    return this[3].toBigInt();
  }

  get _performanceFee(): BigInt {
    return this[4].toBigInt();
  }

  get _tokenName(): string {
    return this[5].toString();
  }

  get _tokenSymbol(): string {
    return this[6].toString();
  }

  get _optionsPremiumPricer(): Address {
    return this[7].toAddress();
  }

  get _strikeSelection(): Address {
    return this[8].toAddress();
  }
}

export class InitializeCall_vaultParamsStruct extends ethereum.Tuple {
  get isPut(): boolean {
    return this[0].toBoolean();
  }

  get decimals(): i32 {
    return this[1].toI32();
  }

  get asset(): Address {
    return this[2].toAddress();
  }

  get underlying(): Address {
    return this[3].toAddress();
  }

  get minimumSupply(): BigInt {
    return this[4].toBigInt();
  }

  get cap(): BigInt {
    return this[5].toBigInt();
  }
}

export class InitiateWithdrawCall extends ethereum.Call {
  get inputs(): InitiateWithdrawCall__Inputs {
    return new InitiateWithdrawCall__Inputs(this);
  }

  get outputs(): InitiateWithdrawCall__Outputs {
    return new InitiateWithdrawCall__Outputs(this);
  }
}

export class InitiateWithdrawCall__Inputs {
  _call: InitiateWithdrawCall;

  constructor(call: InitiateWithdrawCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitiateWithdrawCall__Outputs {
  _call: InitiateWithdrawCall;

  constructor(call: InitiateWithdrawCall) {
    this._call = call;
  }
}

export class MaxRedeemCall extends ethereum.Call {
  get inputs(): MaxRedeemCall__Inputs {
    return new MaxRedeemCall__Inputs(this);
  }

  get outputs(): MaxRedeemCall__Outputs {
    return new MaxRedeemCall__Outputs(this);
  }
}

export class MaxRedeemCall__Inputs {
  _call: MaxRedeemCall;

  constructor(call: MaxRedeemCall) {
    this._call = call;
  }
}

export class MaxRedeemCall__Outputs {
  _call: MaxRedeemCall;

  constructor(call: MaxRedeemCall) {
    this._call = call;
  }
}

export class PausePositionCall extends ethereum.Call {
  get inputs(): PausePositionCall__Inputs {
    return new PausePositionCall__Inputs(this);
  }

  get outputs(): PausePositionCall__Outputs {
    return new PausePositionCall__Outputs(this);
  }
}

export class PausePositionCall__Inputs {
  _call: PausePositionCall;

  constructor(call: PausePositionCall) {
    this._call = call;
  }
}

export class PausePositionCall__Outputs {
  _call: PausePositionCall;

  constructor(call: PausePositionCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RollToNextOptionCall extends ethereum.Call {
  get inputs(): RollToNextOptionCall__Inputs {
    return new RollToNextOptionCall__Inputs(this);
  }

  get outputs(): RollToNextOptionCall__Outputs {
    return new RollToNextOptionCall__Outputs(this);
  }
}

export class RollToNextOptionCall__Inputs {
  _call: RollToNextOptionCall;

  constructor(call: RollToNextOptionCall) {
    this._call = call;
  }
}

export class RollToNextOptionCall__Outputs {
  _call: RollToNextOptionCall;

  constructor(call: RollToNextOptionCall) {
    this._call = call;
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetLiquidityGaugeCall extends ethereum.Call {
  get inputs(): SetLiquidityGaugeCall__Inputs {
    return new SetLiquidityGaugeCall__Inputs(this);
  }

  get outputs(): SetLiquidityGaugeCall__Outputs {
    return new SetLiquidityGaugeCall__Outputs(this);
  }
}

export class SetLiquidityGaugeCall__Inputs {
  _call: SetLiquidityGaugeCall;

  constructor(call: SetLiquidityGaugeCall) {
    this._call = call;
  }

  get newLiquidityGauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidityGaugeCall__Outputs {
  _call: SetLiquidityGaugeCall;

  constructor(call: SetLiquidityGaugeCall) {
    this._call = call;
  }
}

export class SetManagementFeeCall extends ethereum.Call {
  get inputs(): SetManagementFeeCall__Inputs {
    return new SetManagementFeeCall__Inputs(this);
  }

  get outputs(): SetManagementFeeCall__Outputs {
    return new SetManagementFeeCall__Outputs(this);
  }
}

export class SetManagementFeeCall__Inputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }

  get newManagementFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagementFeeCall__Outputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }
}

export class SetMinPriceCall extends ethereum.Call {
  get inputs(): SetMinPriceCall__Inputs {
    return new SetMinPriceCall__Inputs(this);
  }

  get outputs(): SetMinPriceCall__Outputs {
    return new SetMinPriceCall__Outputs(this);
  }
}

export class SetMinPriceCall__Inputs {
  _call: SetMinPriceCall;

  constructor(call: SetMinPriceCall) {
    this._call = call;
  }

  get minPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinPriceCall__Outputs {
  _call: SetMinPriceCall;

  constructor(call: SetMinPriceCall) {
    this._call = call;
  }
}

export class SetNewKeeperCall extends ethereum.Call {
  get inputs(): SetNewKeeperCall__Inputs {
    return new SetNewKeeperCall__Inputs(this);
  }

  get outputs(): SetNewKeeperCall__Outputs {
    return new SetNewKeeperCall__Outputs(this);
  }
}

export class SetNewKeeperCall__Inputs {
  _call: SetNewKeeperCall;

  constructor(call: SetNewKeeperCall) {
    this._call = call;
  }

  get newKeeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewKeeperCall__Outputs {
  _call: SetNewKeeperCall;

  constructor(call: SetNewKeeperCall) {
    this._call = call;
  }
}

export class SetOptionsPremiumPricerCall extends ethereum.Call {
  get inputs(): SetOptionsPremiumPricerCall__Inputs {
    return new SetOptionsPremiumPricerCall__Inputs(this);
  }

  get outputs(): SetOptionsPremiumPricerCall__Outputs {
    return new SetOptionsPremiumPricerCall__Outputs(this);
  }
}

export class SetOptionsPremiumPricerCall__Inputs {
  _call: SetOptionsPremiumPricerCall;

  constructor(call: SetOptionsPremiumPricerCall) {
    this._call = call;
  }

  get newOptionsPremiumPricer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionsPremiumPricerCall__Outputs {
  _call: SetOptionsPremiumPricerCall;

  constructor(call: SetOptionsPremiumPricerCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get newPerformanceFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetStrikePriceCall extends ethereum.Call {
  get inputs(): SetStrikePriceCall__Inputs {
    return new SetStrikePriceCall__Inputs(this);
  }

  get outputs(): SetStrikePriceCall__Outputs {
    return new SetStrikePriceCall__Outputs(this);
  }
}

export class SetStrikePriceCall__Inputs {
  _call: SetStrikePriceCall;

  constructor(call: SetStrikePriceCall) {
    this._call = call;
  }

  get strikePrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStrikePriceCall__Outputs {
  _call: SetStrikePriceCall;

  constructor(call: SetStrikePriceCall) {
    this._call = call;
  }
}

export class SetStrikeSelectionCall extends ethereum.Call {
  get inputs(): SetStrikeSelectionCall__Inputs {
    return new SetStrikeSelectionCall__Inputs(this);
  }

  get outputs(): SetStrikeSelectionCall__Outputs {
    return new SetStrikeSelectionCall__Outputs(this);
  }
}

export class SetStrikeSelectionCall__Inputs {
  _call: SetStrikeSelectionCall;

  constructor(call: SetStrikeSelectionCall) {
    this._call = call;
  }

  get newStrikeSelection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrikeSelectionCall__Outputs {
  _call: SetStrikeSelectionCall;

  constructor(call: SetStrikeSelectionCall) {
    this._call = call;
  }
}

export class SetVaultPauserCall extends ethereum.Call {
  get inputs(): SetVaultPauserCall__Inputs {
    return new SetVaultPauserCall__Inputs(this);
  }

  get outputs(): SetVaultPauserCall__Outputs {
    return new SetVaultPauserCall__Outputs(this);
  }
}

export class SetVaultPauserCall__Inputs {
  _call: SetVaultPauserCall;

  constructor(call: SetVaultPauserCall) {
    this._call = call;
  }

  get newVaultPauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultPauserCall__Outputs {
  _call: SetVaultPauserCall;

  constructor(call: SetVaultPauserCall) {
    this._call = call;
  }
}

export class SettleOfferCall extends ethereum.Call {
  get inputs(): SettleOfferCall__Inputs {
    return new SettleOfferCall__Inputs(this);
  }

  get outputs(): SettleOfferCall__Outputs {
    return new SettleOfferCall__Outputs(this);
  }
}

export class SettleOfferCall__Inputs {
  _call: SettleOfferCall;

  constructor(call: SettleOfferCall) {
    this._call = call;
  }

  get bids(): Array<SettleOfferCallBidsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SettleOfferCallBidsStruct
    >();
  }
}

export class SettleOfferCall__Outputs {
  _call: SettleOfferCall;

  constructor(call: SettleOfferCall) {
    this._call = call;
  }
}

export class SettleOfferCallBidsStruct extends ethereum.Tuple {
  get swapId(): BigInt {
    return this[0].toBigInt();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get signerWallet(): Address {
    return this[2].toAddress();
  }

  get sellAmount(): BigInt {
    return this[3].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[4].toBigInt();
  }

  get referrer(): Address {
    return this[5].toAddress();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawInstantlyCall extends ethereum.Call {
  get inputs(): WithdrawInstantlyCall__Inputs {
    return new WithdrawInstantlyCall__Inputs(this);
  }

  get outputs(): WithdrawInstantlyCall__Outputs {
    return new WithdrawInstantlyCall__Outputs(this);
  }
}

export class WithdrawInstantlyCall__Inputs {
  _call: WithdrawInstantlyCall;

  constructor(call: WithdrawInstantlyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawInstantlyCall__Outputs {
  _call: WithdrawInstantlyCall;

  constructor(call: WithdrawInstantlyCall) {
    this._call = call;
  }
}

// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Authorize extends ethereum.Event {
  get params(): Authorize__Params {
    return new Authorize__Params(this);
  }
}

export class Authorize__Params {
  _event: Authorize;

  constructor(event: Authorize) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewOffer extends ethereum.Event {
  get params(): NewOffer__Params {
    return new NewOffer__Params(this);
  }
}

export class NewOffer__Params {
  _event: NewOffer;

  constructor(event: NewOffer) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get biddingToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get minPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get minBidSize(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalSize(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Revoke extends ethereum.Event {
  get params(): Revoke__Params {
    return new Revoke__Params(this);
  }
}

export class Revoke__Params {
  _event: Revoke;

  constructor(event: Revoke) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetFee extends ethereum.Event {
  get params(): SetFee__Params {
    return new SetFee__Params(this);
  }
}

export class SetFee__Params {
  _event: SetFee;

  constructor(event: SetFee) {
    this._event = event;
  }

  get referrer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SettleOffer extends ethereum.Event {
  get params(): SettleOffer__Params {
    return new SettleOffer__Params(this);
  }
}

export class SettleOffer__Params {
  _event: SettleOffer;

  constructor(event: SettleOffer) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get signerAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sellerAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get referrer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class SwapContract__checkResult {
  value0: BigInt;
  value1: Array<Bytes>;

  constructor(value0: BigInt, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    return map;
  }
}

export class SwapContract__checkInputBidStruct extends ethereum.Tuple {
  get swapId(): BigInt {
    return this[0].toBigInt();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get signerWallet(): Address {
    return this[2].toAddress();
  }

  get sellAmount(): BigInt {
    return this[3].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[4].toBigInt();
  }

  get referrer(): Address {
    return this[5].toAddress();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class SwapContract__swapOffersResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class SwapContract extends ethereum.SmartContract {
  static bind(address: Address): SwapContract {
    return new SwapContract("SwapContract", address);
  }

  BID_TYPEHASH(): Bytes {
    let result = super.call("BID_TYPEHASH", "BID_TYPEHASH():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BID_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BID_TYPEHASH", "BID_TYPEHASH():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_CHAIN_ID(): BigInt {
    let result = super.call(
      "DOMAIN_CHAIN_ID",
      "DOMAIN_CHAIN_ID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DOMAIN_CHAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DOMAIN_CHAIN_ID",
      "DOMAIN_CHAIN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_NAME(): Bytes {
    let result = super.call("DOMAIN_NAME", "DOMAIN_NAME():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DOMAIN_NAME(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DOMAIN_NAME", "DOMAIN_NAME():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_VERSION(): Bytes {
    let result = super.call("DOMAIN_VERSION", "DOMAIN_VERSION():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DOMAIN_VERSION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_VERSION",
      "DOMAIN_VERSION():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  authorized(param0: Address): Address {
    let result = super.call("authorized", "authorized(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_authorized(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("authorized", "authorized(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  averagePriceForOffer(swapId: BigInt): BigInt {
    let result = super.call(
      "averagePriceForOffer",
      "averagePriceForOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(swapId)]
    );

    return result[0].toBigInt();
  }

  try_averagePriceForOffer(swapId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "averagePriceForOffer",
      "averagePriceForOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(swapId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  check(bid: SwapContract__checkInputBidStruct): SwapContract__checkResult {
    let result = super.call(
      "check",
      "check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)):(uint256,bytes32[])",
      [ethereum.Value.fromTuple(bid)]
    );

    return new SwapContract__checkResult(
      result[0].toBigInt(),
      result[1].toBytesArray()
    );
  }

  try_check(
    bid: SwapContract__checkInputBidStruct
  ): ethereum.CallResult<SwapContract__checkResult> {
    let result = super.tryCall(
      "check",
      "check((uint256,uint256,address,uint256,uint256,address,uint8,bytes32,bytes32)):(uint256,bytes32[])",
      [ethereum.Value.fromTuple(bid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__checkResult(
        value[0].toBigInt(),
        value[1].toBytesArray()
      )
    );
  }

  createOffer(
    oToken: Address,
    biddingToken: Address,
    minPrice: BigInt,
    minBidSize: BigInt,
    totalSize: BigInt
  ): BigInt {
    let result = super.call(
      "createOffer",
      "createOffer(address,address,uint96,uint96,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(oToken),
        ethereum.Value.fromAddress(biddingToken),
        ethereum.Value.fromUnsignedBigInt(minPrice),
        ethereum.Value.fromUnsignedBigInt(minBidSize),
        ethereum.Value.fromUnsignedBigInt(totalSize)
      ]
    );

    return result[0].toBigInt();
  }

  try_createOffer(
    oToken: Address,
    biddingToken: Address,
    minPrice: BigInt,
    minBidSize: BigInt,
    totalSize: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createOffer",
      "createOffer(address,address,uint96,uint96,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(oToken),
        ethereum.Value.fromAddress(biddingToken),
        ethereum.Value.fromUnsignedBigInt(minPrice),
        ethereum.Value.fromUnsignedBigInt(minBidSize),
        ethereum.Value.fromUnsignedBigInt(totalSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonceUsed(signer: Address, nonce: BigInt): boolean {
    let result = super.call("nonceUsed", "nonceUsed(address,uint256):(bool)", [
      ethereum.Value.fromAddress(signer),
      ethereum.Value.fromUnsignedBigInt(nonce)
    ]);

    return result[0].toBoolean();
  }

  try_nonceUsed(signer: Address, nonce: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nonceUsed",
      "nonceUsed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  offersCounter(): BigInt {
    let result = super.call("offersCounter", "offersCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_offersCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offersCounter",
      "offersCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referralFees(param0: Address): BigInt {
    let result = super.call("referralFees", "referralFees(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_referralFees(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralFees",
      "referralFees(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapOffers(param0: BigInt): SwapContract__swapOffersResult {
    let result = super.call(
      "swapOffers",
      "swapOffers(uint256):(address,address,uint96,address,uint96,uint128,uint128,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SwapContract__swapOffersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_swapOffers(
    param0: BigInt
  ): ethereum.CallResult<SwapContract__swapOffersResult> {
    let result = super.tryCall(
      "swapOffers",
      "swapOffers(uint256):(address,address,uint96,address,uint96,uint128,uint128,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__swapOffersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeCall extends ethereum.Call {
  get inputs(): AuthorizeCall__Inputs {
    return new AuthorizeCall__Inputs(this);
  }

  get outputs(): AuthorizeCall__Outputs {
    return new AuthorizeCall__Outputs(this);
  }
}

export class AuthorizeCall__Inputs {
  _call: AuthorizeCall;

  constructor(call: AuthorizeCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeCall__Outputs {
  _call: AuthorizeCall;

  constructor(call: AuthorizeCall) {
    this._call = call;
  }
}

export class CancelNonceCall extends ethereum.Call {
  get inputs(): CancelNonceCall__Inputs {
    return new CancelNonceCall__Inputs(this);
  }

  get outputs(): CancelNonceCall__Outputs {
    return new CancelNonceCall__Outputs(this);
  }
}

export class CancelNonceCall__Inputs {
  _call: CancelNonceCall;

  constructor(call: CancelNonceCall) {
    this._call = call;
  }

  get nonces(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CancelNonceCall__Outputs {
  _call: CancelNonceCall;

  constructor(call: CancelNonceCall) {
    this._call = call;
  }
}

export class CreateOfferCall extends ethereum.Call {
  get inputs(): CreateOfferCall__Inputs {
    return new CreateOfferCall__Inputs(this);
  }

  get outputs(): CreateOfferCall__Outputs {
    return new CreateOfferCall__Outputs(this);
  }
}

export class CreateOfferCall__Inputs {
  _call: CreateOfferCall;

  constructor(call: CreateOfferCall) {
    this._call = call;
  }

  get oToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get biddingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minBidSize(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get totalSize(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateOfferCall__Outputs {
  _call: CreateOfferCall;

  constructor(call: CreateOfferCall) {
    this._call = call;
  }

  get swapId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get referrer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SettleOfferCall extends ethereum.Call {
  get inputs(): SettleOfferCall__Inputs {
    return new SettleOfferCall__Inputs(this);
  }

  get outputs(): SettleOfferCall__Outputs {
    return new SettleOfferCall__Outputs(this);
  }
}

export class SettleOfferCall__Inputs {
  _call: SettleOfferCall;

  constructor(call: SettleOfferCall) {
    this._call = call;
  }

  get swapId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bids(): Array<SettleOfferCallBidsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      SettleOfferCallBidsStruct
    >();
  }
}

export class SettleOfferCall__Outputs {
  _call: SettleOfferCall;

  constructor(call: SettleOfferCall) {
    this._call = call;
  }
}

export class SettleOfferCallBidsStruct extends ethereum.Tuple {
  get swapId(): BigInt {
    return this[0].toBigInt();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }

  get signerWallet(): Address {
    return this[2].toAddress();
  }

  get sellAmount(): BigInt {
    return this[3].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[4].toBigInt();
  }

  get referrer(): Address {
    return this[5].toAddress();
  }

  get v(): i32 {
    return this[6].toI32();
  }

  get r(): Bytes {
    return this[7].toBytes();
  }

  get s(): Bytes {
    return this[8].toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

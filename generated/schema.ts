// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get lastPriceUSD(): BigDecimal | null {
    let value = this.get("lastPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastPriceUSD");
    } else {
      this.set("lastPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastPriceBlockNumber(): BigInt | null {
    let value = this.get("lastPriceBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastPriceBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("lastPriceBlockNumber");
    } else {
      this.set("lastPriceBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class RewardToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RewardToken", id.toString(), this);
    }
  }

  static load(id: string): RewardToken | null {
    return changetype<RewardToken | null>(store.get("RewardToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("slug", Value.fromString(""));
    this.set("schemaVersion", Value.fromString(""));
    this.set("subgraphVersion", Value.fromString(""));
    this.set("methodologyVersion", Value.fromString(""));
    this.set("network", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("cumulativeUniqueUsers", Value.fromI32(0));
    this.set("totalPoolCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get slug(): string {
    let value = this.get("slug");
    return value!.toString();
  }

  set slug(value: string) {
    this.set("slug", Value.fromString(value));
  }

  get schemaVersion(): string {
    let value = this.get("schemaVersion");
    return value!.toString();
  }

  set schemaVersion(value: string) {
    this.set("schemaVersion", Value.fromString(value));
  }

  get subgraphVersion(): string {
    let value = this.get("subgraphVersion");
    return value!.toString();
  }

  set subgraphVersion(value: string) {
    this.set("subgraphVersion", Value.fromString(value));
  }

  get methodologyVersion(): string {
    let value = this.get("methodologyVersion");
    return value!.toString();
  }

  set methodologyVersion(value: string) {
    this.set("methodologyVersion", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    return value!.toI32();
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get dailyUsageMetrics(): Array<string> {
    let value = this.get("dailyUsageMetrics");
    return value!.toStringArray();
  }

  set dailyUsageMetrics(value: Array<string>) {
    this.set("dailyUsageMetrics", Value.fromStringArray(value));
  }

  get hourlyUsageMetrics(): Array<string> {
    let value = this.get("hourlyUsageMetrics");
    return value!.toStringArray();
  }

  set hourlyUsageMetrics(value: Array<string>) {
    this.set("hourlyUsageMetrics", Value.fromStringArray(value));
  }

  get financialMetrics(): Array<string> {
    let value = this.get("financialMetrics");
    return value!.toStringArray();
  }

  set financialMetrics(value: Array<string>) {
    this.set("financialMetrics", Value.fromStringArray(value));
  }

  get pools(): Array<string> {
    let value = this.get("pools");
    return value!.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set("pools", Value.fromStringArray(value));
  }
}

export class UsageMetricsDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("dailyActiveUsers", Value.fromI32(0));
    this.set("cumulativeUniqueUsers", Value.fromI32(0));
    this.set("dailyTransactionCount", Value.fromI32(0));
    this.set("totalPoolCount", Value.fromI32(0));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsDailySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UsageMetricsDailySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UsageMetricsDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): UsageMetricsDailySnapshot | null {
    return changetype<UsageMetricsDailySnapshot | null>(
      store.get("UsageMetricsDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get dailyActiveUsers(): i32 {
    let value = this.get("dailyActiveUsers");
    return value!.toI32();
  }

  set dailyActiveUsers(value: i32) {
    this.set("dailyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get dailyTransactionCount(): i32 {
    let value = this.get("dailyTransactionCount");
    return value!.toI32();
  }

  set dailyTransactionCount(value: i32) {
    this.set("dailyTransactionCount", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    return value!.toI32();
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UsageMetricsHourlySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("hourlyActiveUsers", Value.fromI32(0));
    this.set("cumulativeUniqueUsers", Value.fromI32(0));
    this.set("hourlyTransactionCount", Value.fromI32(0));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsHourlySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UsageMetricsHourlySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UsageMetricsHourlySnapshot", id.toString(), this);
    }
  }

  static load(id: string): UsageMetricsHourlySnapshot | null {
    return changetype<UsageMetricsHourlySnapshot | null>(
      store.get("UsageMetricsHourlySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get hourlyActiveUsers(): i32 {
    let value = this.get("hourlyActiveUsers");
    return value!.toI32();
  }

  set hourlyActiveUsers(value: i32) {
    this.set("hourlyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    return value!.toI32();
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get hourlyTransactionCount(): i32 {
    let value = this.get("hourlyTransactionCount");
    return value!.toI32();
  }

  set hourlyTransactionCount(value: i32) {
    this.set("hourlyTransactionCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FinancialsDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "dailySupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dailyProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FinancialsDailySnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FinancialsDailySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FinancialsDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): FinancialsDailySnapshot | null {
    return changetype<FinancialsDailySnapshot | null>(
      store.get("FinancialsDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("inputTokens", Value.fromStringArray(new Array(0)));
    this.set("createdTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("inputTokenBalances", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get inputTokens(): Array<string> {
    let value = this.get("inputTokens");
    return value!.toStringArray();
  }

  set inputTokens(value: Array<string>) {
    this.set("inputTokens", Value.fromStringArray(value));
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(<string>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    return value!.toBigInt();
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    return value!.toBigIntArray();
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }

  get dailySnapshots(): Array<string> {
    let value = this.get("dailySnapshots");
    return value!.toStringArray();
  }

  set dailySnapshots(value: Array<string>) {
    this.set("dailySnapshots", Value.fromStringArray(value));
  }

  get hourlySnapshots(): Array<string> {
    let value = this.get("hourlySnapshots");
    return value!.toStringArray();
  }

  set hourlySnapshots(value: Array<string>) {
    this.set("hourlySnapshots", Value.fromStringArray(value));
  }
}

export class PoolDailySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dailySupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "dailyProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("inputTokenBalances", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolDailySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolDailySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolDailySnapshot", id.toString(), this);
    }
  }

  static load(id: string): PoolDailySnapshot | null {
    return changetype<PoolDailySnapshot | null>(
      store.get("PoolDailySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    return value!.toBigIntArray();
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }
}

export class PoolHourlySnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "cumulativeSupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "hourlySupplySideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "hourlyProtocolSideRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "cumulativeTotalRevenueUSD",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("hourlyTotalRevenueUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("inputTokenBalances", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolHourlySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolHourlySnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolHourlySnapshot", id.toString(), this);
    }
  }

  static load(id: string): PoolHourlySnapshot | null {
    return changetype<PoolHourlySnapshot | null>(
      store.get("PoolHourlySnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("hourlySupplySideRevenueUSD");
    return value!.toBigDecimal();
  }

  set hourlySupplySideRevenueUSD(value: BigDecimal) {
    this.set("hourlySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("hourlyProtocolSideRevenueUSD");
    return value!.toBigDecimal();
  }

  set hourlyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("hourlyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyTotalRevenueUSD(): BigDecimal {
    let value = this.get("hourlyTotalRevenueUSD");
    return value!.toBigDecimal();
  }

  set hourlyTotalRevenueUSD(value: BigDecimal) {
    this.set("hourlyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    return value!.toBigIntArray();
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value)
      );
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class ActiveAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveAccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveAccount", id.toString(), this);
    }
  }

  static load(id: string): ActiveAccount | null {
    return changetype<ActiveAccount | null>(store.get("ActiveAccount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class _Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("round", Value.fromI32(0));
    this.set("totalValueLocked", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("currentOption", Value.fromString(""));
    this.set("isPut", Value.fromBoolean(false));
    this.set("currentOptionAuctionId", Value.fromI32(0));
    this.set("liquidityGauge", Value.fromString(""));
    this.set(
      "managementFeesCollected",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "performanceFeeCollected",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("decimals", Value.fromI32(0));
    this.set("auctionsPremiumPricer", Value.fromString(""));
    this.set("oTokenFactory", Value.fromString(""));
    this.set("marginPool", Value.fromString(""));
    this.set("gammaController", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_Vault", id.toString(), this);
    }
  }

  static load(id: string): _Vault | null {
    return changetype<_Vault | null>(store.get("_Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get round(): i32 {
    let value = this.get("round");
    return value!.toI32();
  }

  set round(value: i32) {
    this.set("round", Value.fromI32(value));
  }

  get totalValueLocked(): BigInt {
    let value = this.get("totalValueLocked");
    return value!.toBigInt();
  }

  set totalValueLocked(value: BigInt) {
    this.set("totalValueLocked", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get currentOption(): string {
    let value = this.get("currentOption");
    return value!.toString();
  }

  set currentOption(value: string) {
    this.set("currentOption", Value.fromString(value));
  }

  get isPut(): boolean {
    let value = this.get("isPut");
    return value!.toBoolean();
  }

  set isPut(value: boolean) {
    this.set("isPut", Value.fromBoolean(value));
  }

  get currentOptionAuctionId(): i32 {
    let value = this.get("currentOptionAuctionId");
    return value!.toI32();
  }

  set currentOptionAuctionId(value: i32) {
    this.set("currentOptionAuctionId", Value.fromI32(value));
  }

  get liquidityGauge(): string {
    let value = this.get("liquidityGauge");
    return value!.toString();
  }

  set liquidityGauge(value: string) {
    this.set("liquidityGauge", Value.fromString(value));
  }

  get managementFeesCollected(): BigDecimal {
    let value = this.get("managementFeesCollected");
    return value!.toBigDecimal();
  }

  set managementFeesCollected(value: BigDecimal) {
    this.set("managementFeesCollected", Value.fromBigDecimal(value));
  }

  get performanceFeeCollected(): BigDecimal {
    let value = this.get("performanceFeeCollected");
    return value!.toBigDecimal();
  }

  set performanceFeeCollected(value: BigDecimal) {
    this.set("performanceFeeCollected", Value.fromBigDecimal(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get auctionsPremiumPricer(): string {
    let value = this.get("auctionsPremiumPricer");
    return value!.toString();
  }

  set auctionsPremiumPricer(value: string) {
    this.set("auctionsPremiumPricer", Value.fromString(value));
  }

  get options(): Array<string> | null {
    let value = this.get("options");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set options(value: Array<string> | null) {
    if (!value) {
      this.unset("options");
    } else {
      this.set("options", Value.fromStringArray(<Array<string>>value));
    }
  }

  get oTokenFactory(): string {
    let value = this.get("oTokenFactory");
    return value!.toString();
  }

  set oTokenFactory(value: string) {
    this.set("oTokenFactory", Value.fromString(value));
  }

  get marginPool(): string {
    let value = this.get("marginPool");
    return value!.toString();
  }

  set marginPool(value: string) {
    this.set("marginPool", Value.fromString(value));
  }

  get gammaController(): string {
    let value = this.get("gammaController");
    return value!.toString();
  }

  set gammaController(value: string) {
    this.set("gammaController", Value.fromString(value));
  }

  get totalNotionalVolume(): BigDecimal | null {
    let value = this.get("totalNotionalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalNotionalVolume(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalNotionalVolume");
    } else {
      this.set("totalNotionalVolume", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class _Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("optionToken", Value.fromString(""));
    this.set("biddingToken", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _Auction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _Auction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("_Auction", id.toString(), this);
    }
  }

  static load(id: string): _Auction | null {
    return changetype<_Auction | null>(store.get("_Auction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get optionToken(): string {
    let value = this.get("optionToken");
    return value!.toString();
  }

  set optionToken(value: string) {
    this.set("optionToken", Value.fromString(value));
  }

  get biddingToken(): string {
    let value = this.get("biddingToken");
    return value!.toString();
  }

  set biddingToken(value: string) {
    this.set("biddingToken", Value.fromString(value));
  }
}

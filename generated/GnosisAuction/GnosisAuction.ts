// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCleared extends ethereum.Event {
  get params(): AuctionCleared__Params {
    return new AuctionCleared__Params(this);
  }
}

export class AuctionCleared__Params {
  _event: AuctionCleared;

  constructor(event: AuctionCleared) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get soldAuctioningTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get soldBiddingTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get clearingPriceOrder(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class CancellationSellOrder extends ethereum.Event {
  get params(): CancellationSellOrder__Params {
    return new CancellationSellOrder__Params(this);
  }
}

export class CancellationSellOrder__Params {
  _event: CancellationSellOrder;

  constructor(event: CancellationSellOrder) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimedFromOrder extends ethereum.Event {
  get params(): ClaimedFromOrder__Params {
    return new ClaimedFromOrder__Params(this);
  }
}

export class ClaimedFromOrder__Params {
  _event: ClaimedFromOrder;

  constructor(event: ClaimedFromOrder) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewAuction extends ethereum.Event {
  get params(): NewAuction__Params {
    return new NewAuction__Params(this);
  }
}

export class NewAuction__Params {
  _event: NewAuction;

  constructor(event: NewAuction) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _auctioningToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _biddingToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get orderCancellationEndDate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get auctionEndDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get userId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _auctionedSellAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get _minBuyAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get minimumBiddingAmountPerOrder(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get minFundingThreshold(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get allowListContract(): Address {
    return this._event.parameters[10].value.toAddress();
  }

  get allowListData(): Bytes {
    return this._event.parameters[11].value.toBytes();
  }
}

export class NewSellOrder extends ethereum.Event {
  get params(): NewSellOrder__Params {
    return new NewSellOrder__Params(this);
  }
}

export class NewSellOrder__Params {
  _event: NewSellOrder;

  constructor(event: NewSellOrder) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewUser extends ethereum.Event {
  get params(): NewUser__Params {
    return new NewUser__Params(this);
  }
}

export class NewUser__Params {
  _event: NewUser;

  constructor(event: NewUser) {
    this._event = event;
  }

  get userId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UserRegistration extends ethereum.Event {
  get params(): UserRegistration__Params {
    return new UserRegistration__Params(this);
  }
}

export class UserRegistration__Params {
  _event: UserRegistration;

  constructor(event: UserRegistration) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GnosisAuction__auctionDataResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;
  value5: BigInt;
  value6: BigInt;
  value7: Bytes;
  value8: Bytes;
  value9: BigInt;
  value10: boolean;
  value11: boolean;
  value12: BigInt;
  value13: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes,
    value5: BigInt,
    value6: BigInt,
    value7: Bytes,
    value8: Bytes,
    value9: BigInt,
    value10: boolean,
    value11: boolean,
    value12: BigInt,
    value13: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromFixedBytes(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromFixedBytes(this.value7));
    map.set("value8", ethereum.Value.fromFixedBytes(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    map.set("value13", ethereum.Value.fromUnsignedBigInt(this.value13));
    return map;
  }
}

export class GnosisAuction__claimFromParticipantOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GnosisAuction extends ethereum.SmartContract {
  static bind(address: Address): GnosisAuction {
    return new GnosisAuction("GnosisAuction", address);
  }

  FEE_DENOMINATOR(): BigInt {
    let result = super.call(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FEE_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionAccessData(param0: BigInt): Bytes {
    let result = super.call(
      "auctionAccessData",
      "auctionAccessData(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_auctionAccessData(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "auctionAccessData",
      "auctionAccessData(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auctionAccessManager(param0: BigInt): Address {
    let result = super.call(
      "auctionAccessManager",
      "auctionAccessManager(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_auctionAccessManager(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "auctionAccessManager",
      "auctionAccessManager(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionCounter(): BigInt {
    let result = super.call("auctionCounter", "auctionCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionCounter",
      "auctionCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionData(param0: BigInt): GnosisAuction__auctionDataResult {
    let result = super.call(
      "auctionData",
      "auctionData(uint256):(address,address,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes32,uint96,bool,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GnosisAuction__auctionDataResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBytes(),
      result[8].toBytes(),
      result[9].toBigInt(),
      result[10].toBoolean(),
      result[11].toBoolean(),
      result[12].toBigInt(),
      result[13].toBigInt()
    );
  }

  try_auctionData(
    param0: BigInt
  ): ethereum.CallResult<GnosisAuction__auctionDataResult> {
    let result = super.tryCall(
      "auctionData",
      "auctionData(uint256):(address,address,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes32,uint96,bool,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GnosisAuction__auctionDataResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBytes(),
        value[8].toBytes(),
        value[9].toBigInt(),
        value[10].toBoolean(),
        value[11].toBoolean(),
        value[12].toBigInt(),
        value[13].toBigInt()
      )
    );
  }

  claimFromParticipantOrder(
    auctionId: BigInt,
    orders: Array<Bytes>
  ): GnosisAuction__claimFromParticipantOrderResult {
    let result = super.call(
      "claimFromParticipantOrder",
      "claimFromParticipantOrder(uint256,bytes32[]):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromFixedBytesArray(orders)
      ]
    );

    return new GnosisAuction__claimFromParticipantOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimFromParticipantOrder(
    auctionId: BigInt,
    orders: Array<Bytes>
  ): ethereum.CallResult<GnosisAuction__claimFromParticipantOrderResult> {
    let result = super.tryCall(
      "claimFromParticipantOrder",
      "claimFromParticipantOrder(uint256,bytes32[]):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromFixedBytesArray(orders)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GnosisAuction__claimFromParticipantOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  containsOrder(auctionId: BigInt, order: Bytes): boolean {
    let result = super.call(
      "containsOrder",
      "containsOrder(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromFixedBytes(order)
      ]
    );

    return result[0].toBoolean();
  }

  try_containsOrder(
    auctionId: BigInt,
    order: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "containsOrder",
      "containsOrder(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromFixedBytes(order)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeNumerator(): BigInt {
    let result = super.call("feeNumerator", "feeNumerator():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeNumerator", "feeNumerator():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeReceiverUserId(): BigInt {
    let result = super.call(
      "feeReceiverUserId",
      "feeReceiverUserId():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeReceiverUserId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeReceiverUserId",
      "feeReceiverUserId():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSecondsRemainingInBatch(auctionId: BigInt): BigInt {
    let result = super.call(
      "getSecondsRemainingInBatch",
      "getSecondsRemainingInBatch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getSecondsRemainingInBatch(
    auctionId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSecondsRemainingInBatch",
      "getSecondsRemainingInBatch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserId(user: Address): BigInt {
    let result = super.call("getUserId", "getUserId(address):(uint64)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserId(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getUserId", "getUserId(address):(uint64)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initiateAuction(
    _auctioningToken: Address,
    _biddingToken: Address,
    orderCancellationEndDate: BigInt,
    auctionEndDate: BigInt,
    _auctionedSellAmount: BigInt,
    _minBuyAmount: BigInt,
    minimumBiddingAmountPerOrder: BigInt,
    minFundingThreshold: BigInt,
    isAtomicClosureAllowed: boolean,
    accessManagerContract: Address,
    accessManagerContractData: Bytes
  ): BigInt {
    let result = super.call(
      "initiateAuction",
      "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_auctioningToken),
        ethereum.Value.fromAddress(_biddingToken),
        ethereum.Value.fromUnsignedBigInt(orderCancellationEndDate),
        ethereum.Value.fromUnsignedBigInt(auctionEndDate),
        ethereum.Value.fromUnsignedBigInt(_auctionedSellAmount),
        ethereum.Value.fromUnsignedBigInt(_minBuyAmount),
        ethereum.Value.fromUnsignedBigInt(minimumBiddingAmountPerOrder),
        ethereum.Value.fromUnsignedBigInt(minFundingThreshold),
        ethereum.Value.fromBoolean(isAtomicClosureAllowed),
        ethereum.Value.fromAddress(accessManagerContract),
        ethereum.Value.fromBytes(accessManagerContractData)
      ]
    );

    return result[0].toBigInt();
  }

  try_initiateAuction(
    _auctioningToken: Address,
    _biddingToken: Address,
    orderCancellationEndDate: BigInt,
    auctionEndDate: BigInt,
    _auctionedSellAmount: BigInt,
    _minBuyAmount: BigInt,
    minimumBiddingAmountPerOrder: BigInt,
    minFundingThreshold: BigInt,
    isAtomicClosureAllowed: boolean,
    accessManagerContract: Address,
    accessManagerContractData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initiateAuction",
      "initiateAuction(address,address,uint256,uint256,uint96,uint96,uint256,uint256,bool,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_auctioningToken),
        ethereum.Value.fromAddress(_biddingToken),
        ethereum.Value.fromUnsignedBigInt(orderCancellationEndDate),
        ethereum.Value.fromUnsignedBigInt(auctionEndDate),
        ethereum.Value.fromUnsignedBigInt(_auctionedSellAmount),
        ethereum.Value.fromUnsignedBigInt(_minBuyAmount),
        ethereum.Value.fromUnsignedBigInt(minimumBiddingAmountPerOrder),
        ethereum.Value.fromUnsignedBigInt(minFundingThreshold),
        ethereum.Value.fromBoolean(isAtomicClosureAllowed),
        ethereum.Value.fromAddress(accessManagerContract),
        ethereum.Value.fromBytes(accessManagerContractData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numUsers(): BigInt {
    let result = super.call("numUsers", "numUsers():(uint64)", []);

    return result[0].toBigInt();
  }

  try_numUsers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numUsers", "numUsers():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  placeSellOrders(
    auctionId: BigInt,
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>,
    allowListCallData: Bytes
  ): BigInt {
    let result = super.call(
      "placeSellOrders",
      "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders),
        ethereum.Value.fromBytes(allowListCallData)
      ]
    );

    return result[0].toBigInt();
  }

  try_placeSellOrders(
    auctionId: BigInt,
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>,
    allowListCallData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeSellOrders",
      "placeSellOrders(uint256,uint96[],uint96[],bytes32[],bytes):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders),
        ethereum.Value.fromBytes(allowListCallData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  placeSellOrdersOnBehalf(
    auctionId: BigInt,
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>,
    allowListCallData: Bytes,
    orderSubmitter: Address
  ): BigInt {
    let result = super.call(
      "placeSellOrdersOnBehalf",
      "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders),
        ethereum.Value.fromBytes(allowListCallData),
        ethereum.Value.fromAddress(orderSubmitter)
      ]
    );

    return result[0].toBigInt();
  }

  try_placeSellOrdersOnBehalf(
    auctionId: BigInt,
    _minBuyAmounts: Array<BigInt>,
    _sellAmounts: Array<BigInt>,
    _prevSellOrders: Array<Bytes>,
    allowListCallData: Bytes,
    orderSubmitter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placeSellOrdersOnBehalf",
      "placeSellOrdersOnBehalf(uint256,uint96[],uint96[],bytes32[],bytes,address):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(auctionId),
        ethereum.Value.fromUnsignedBigIntArray(_minBuyAmounts),
        ethereum.Value.fromUnsignedBigIntArray(_sellAmounts),
        ethereum.Value.fromFixedBytesArray(_prevSellOrders),
        ethereum.Value.fromBytes(allowListCallData),
        ethereum.Value.fromAddress(orderSubmitter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerUser(user: Address): BigInt {
    let result = super.call("registerUser", "registerUser(address):(uint64)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_registerUser(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerUser",
      "registerUser(address):(uint64)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleAuction(auctionId: BigInt): Bytes {
    let result = super.call(
      "settleAuction",
      "settleAuction(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBytes();
  }

  try_settleAuction(auctionId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "settleAuction",
      "settleAuction(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelSellOrdersCall extends ethereum.Call {
  get inputs(): CancelSellOrdersCall__Inputs {
    return new CancelSellOrdersCall__Inputs(this);
  }

  get outputs(): CancelSellOrdersCall__Outputs {
    return new CancelSellOrdersCall__Outputs(this);
  }
}

export class CancelSellOrdersCall__Inputs {
  _call: CancelSellOrdersCall;

  constructor(call: CancelSellOrdersCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sellOrders(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class CancelSellOrdersCall__Outputs {
  _call: CancelSellOrdersCall;

  constructor(call: CancelSellOrdersCall) {
    this._call = call;
  }
}

export class ClaimFromParticipantOrderCall extends ethereum.Call {
  get inputs(): ClaimFromParticipantOrderCall__Inputs {
    return new ClaimFromParticipantOrderCall__Inputs(this);
  }

  get outputs(): ClaimFromParticipantOrderCall__Outputs {
    return new ClaimFromParticipantOrderCall__Outputs(this);
  }
}

export class ClaimFromParticipantOrderCall__Inputs {
  _call: ClaimFromParticipantOrderCall;

  constructor(call: ClaimFromParticipantOrderCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get orders(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class ClaimFromParticipantOrderCall__Outputs {
  _call: ClaimFromParticipantOrderCall;

  constructor(call: ClaimFromParticipantOrderCall) {
    this._call = call;
  }

  get sumAuctioningTokenAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get sumBiddingTokenAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class GetUserIdCall extends ethereum.Call {
  get inputs(): GetUserIdCall__Inputs {
    return new GetUserIdCall__Inputs(this);
  }

  get outputs(): GetUserIdCall__Outputs {
    return new GetUserIdCall__Outputs(this);
  }
}

export class GetUserIdCall__Inputs {
  _call: GetUserIdCall;

  constructor(call: GetUserIdCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetUserIdCall__Outputs {
  _call: GetUserIdCall;

  constructor(call: GetUserIdCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitiateAuctionCall extends ethereum.Call {
  get inputs(): InitiateAuctionCall__Inputs {
    return new InitiateAuctionCall__Inputs(this);
  }

  get outputs(): InitiateAuctionCall__Outputs {
    return new InitiateAuctionCall__Outputs(this);
  }
}

export class InitiateAuctionCall__Inputs {
  _call: InitiateAuctionCall;

  constructor(call: InitiateAuctionCall) {
    this._call = call;
  }

  get _auctioningToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _biddingToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get orderCancellationEndDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get auctionEndDate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _auctionedSellAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minBuyAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get minimumBiddingAmountPerOrder(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get minFundingThreshold(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get isAtomicClosureAllowed(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }

  get accessManagerContract(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get accessManagerContractData(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }
}

export class InitiateAuctionCall__Outputs {
  _call: InitiateAuctionCall;

  constructor(call: InitiateAuctionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PlaceSellOrdersCall extends ethereum.Call {
  get inputs(): PlaceSellOrdersCall__Inputs {
    return new PlaceSellOrdersCall__Inputs(this);
  }

  get outputs(): PlaceSellOrdersCall__Outputs {
    return new PlaceSellOrdersCall__Outputs(this);
  }
}

export class PlaceSellOrdersCall__Inputs {
  _call: PlaceSellOrdersCall;

  constructor(call: PlaceSellOrdersCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBuyAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _sellAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _prevSellOrders(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get allowListCallData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class PlaceSellOrdersCall__Outputs {
  _call: PlaceSellOrdersCall;

  constructor(call: PlaceSellOrdersCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PlaceSellOrdersOnBehalfCall extends ethereum.Call {
  get inputs(): PlaceSellOrdersOnBehalfCall__Inputs {
    return new PlaceSellOrdersOnBehalfCall__Inputs(this);
  }

  get outputs(): PlaceSellOrdersOnBehalfCall__Outputs {
    return new PlaceSellOrdersOnBehalfCall__Outputs(this);
  }
}

export class PlaceSellOrdersOnBehalfCall__Inputs {
  _call: PlaceSellOrdersOnBehalfCall;

  constructor(call: PlaceSellOrdersOnBehalfCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBuyAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _sellAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _prevSellOrders(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get allowListCallData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get orderSubmitter(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class PlaceSellOrdersOnBehalfCall__Outputs {
  _call: PlaceSellOrdersOnBehalfCall;

  constructor(call: PlaceSellOrdersOnBehalfCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PrecalculateSellAmountSumCall extends ethereum.Call {
  get inputs(): PrecalculateSellAmountSumCall__Inputs {
    return new PrecalculateSellAmountSumCall__Inputs(this);
  }

  get outputs(): PrecalculateSellAmountSumCall__Outputs {
    return new PrecalculateSellAmountSumCall__Outputs(this);
  }
}

export class PrecalculateSellAmountSumCall__Inputs {
  _call: PrecalculateSellAmountSumCall;

  constructor(call: PrecalculateSellAmountSumCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get iterationSteps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PrecalculateSellAmountSumCall__Outputs {
  _call: PrecalculateSellAmountSumCall;

  constructor(call: PrecalculateSellAmountSumCall) {
    this._call = call;
  }
}

export class RegisterUserCall extends ethereum.Call {
  get inputs(): RegisterUserCall__Inputs {
    return new RegisterUserCall__Inputs(this);
  }

  get outputs(): RegisterUserCall__Outputs {
    return new RegisterUserCall__Outputs(this);
  }
}

export class RegisterUserCall__Inputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterUserCall__Outputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get userId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeParametersCall extends ethereum.Call {
  get inputs(): SetFeeParametersCall__Inputs {
    return new SetFeeParametersCall__Inputs(this);
  }

  get outputs(): SetFeeParametersCall__Outputs {
    return new SetFeeParametersCall__Outputs(this);
  }
}

export class SetFeeParametersCall__Inputs {
  _call: SetFeeParametersCall;

  constructor(call: SetFeeParametersCall) {
    this._call = call;
  }

  get newFeeNumerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newfeeReceiverAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetFeeParametersCall__Outputs {
  _call: SetFeeParametersCall;

  constructor(call: SetFeeParametersCall) {
    this._call = call;
  }
}

export class SettleAuctionCall extends ethereum.Call {
  get inputs(): SettleAuctionCall__Inputs {
    return new SettleAuctionCall__Inputs(this);
  }

  get outputs(): SettleAuctionCall__Outputs {
    return new SettleAuctionCall__Outputs(this);
  }
}

export class SettleAuctionCall__Inputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleAuctionCall__Outputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }

  get clearingOrder(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SettleAuctionAtomicallyCall extends ethereum.Call {
  get inputs(): SettleAuctionAtomicallyCall__Inputs {
    return new SettleAuctionAtomicallyCall__Inputs(this);
  }

  get outputs(): SettleAuctionAtomicallyCall__Outputs {
    return new SettleAuctionAtomicallyCall__Outputs(this);
  }
}

export class SettleAuctionAtomicallyCall__Inputs {
  _call: SettleAuctionAtomicallyCall;

  constructor(call: SettleAuctionAtomicallyCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBuyAmount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _sellAmount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _prevSellOrder(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get allowListCallData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SettleAuctionAtomicallyCall__Outputs {
  _call: SettleAuctionAtomicallyCall;

  constructor(call: SettleAuctionAtomicallyCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
